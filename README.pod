=head1 Resque for perl

Redis-backed library for creating background jobs, placing them on multiple queues, and processing them later.

=head1 SYNOPSIS

First you create a Resque instance where you configure the L<Redis> backend and then you can
start sending jobs to be done by workers:

    use Resque;

    my $r = Resque->new( redis => '127.0.0.1:6379' );

    $r->push( my_queue => { 
        class => 'My::Task', 
        args => [ 'Hello world!' ]
    });

Background jobs can be any perl module that implement a perform() function. The Resque::Job object is
passed as the only argument to this function:
  
    package My::Task;
    use strict;
    use 5.10.0;

    sub perform {
        my $job = shift;
        say $job->args->[0];
    }

    1;

Finally, you run your jobs by instancing a L<Resque::Worker> and telling it to listen to one or more
queues:

    use Resque;

    my $w = Resque->new( redis => '127.0.0.1:6379' )->worker;
    $w->add_queue('my_queue');
    $w->work;

=head1 DESCRIPTION

Resque is a Redis-backed library for creating background jobs, placing them on multiple queues, 
and processing them later.

This library is a perl port of the original Ruby one: L<https://github.com/defunkt/resque>

My main goal doing this port is to use the same backend to be able to manage the system using 
ruby's resque-server webapp.

As extracted from the original docs, the main features of Resque are:

Resque workers can be distributed between multiple machines, support priorities, are resilient to 
memory leaks, tell you what they're doing, and expect failure.

Resque queues are persistent; support constant time, atomic push and pop (thanks to Redis); provide 
visibility into their contents; and store jobs as simple JSON hashes.

The Resque frontend tells you what workers are doing, what workers are not doing, what queues you're 
using, what's in those queues, provides general usage stats, and helps you track failures.

A lot more about Resque can be read on the original blog post: L<http://github.com/blog/542-introducing-resque>

=head1 WEB FRONTEND

The original ruby project offers a web frontend for displaying queue- and
worker status.

A simple way to get the web frontend running is to install L<RVM|http://rvm.io>
and let it manage your ruby installation inside your $HOME directory.

    # download and install rvm:
    curl -L https://get.rvm.io | bash -s stable
    
    # on OS-X you might need to run:
    rvm autolibs enable
    
    # build a ruby, get and run resque (assume Redis server is running)
    rvm install 2.0.0
    gem install resque
    resque-web
